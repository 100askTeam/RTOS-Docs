import{_ as i,r as a,o as c,c as o,a as s,b as n,d as t,w as l,e as u}from"./app-a3aa5aa8.js";const d={},r=u(`<h1 id="第三章-任务管理" tabindex="-1"><a class="header-anchor" href="#第三章-任务管理" aria-hidden="true">#</a> 第三章 任务管理</h1><p>在本章中，会涉及如下内容：</p><ul><li>FreeRTOS如何给每个任务分配CPU时间</li><li>如何选择某个任务来运行</li><li>任务优先级如何起作用</li><li>任务有哪些状态</li><li>如何实现任务</li><li>如何使用任务参数</li><li>怎么修改任务优先级</li><li>怎么删除任务</li><li>怎么实现周期性的任务</li><li>如何使用空闲任务</li></ul><h2 id="_3-1-基本概念" tabindex="-1"><a class="header-anchor" href="#_3-1-基本概念" aria-hidden="true">#</a> 3.1 基本概念</h2><p>对于整个单片机程序，我们称之为application，应用程序。</p><p>使用FreeRTOS时，我们可以在application中创建多个任务(task)，有些文档把任务也称为线程(thread)。</p><p><img src="http://photos.100ask.net/rtos-docs/FreeRTOS/simulator/chapter-3/01_mother_do_jobs.png" alt=""></p><p>以日常生活为例，比如这个母亲要同时做两件事：</p><ul><li>喂饭：这是一个任务</li><li>回信息：这是另一个任务</li></ul><p>这可以引入很多概念：</p><ul><li>任务状态(State)： <ul><li>当前正在喂饭，它是running状态；另一个&quot;回信息&quot;的任务就是&quot;not running&quot;状态</li><li>&quot;not running&quot;状态还可以细分： <ul><li>ready：就绪，随时可以运行</li><li>blocked：阻塞，卡住了，母亲在等待同事回信息</li><li>suspended：挂起，同事废话太多，不管他了</li></ul></li></ul></li><li>优先级(Priority) <ul><li>我工作生活兼顾：喂饭、回信息优先级一样，轮流做</li><li>我忙里偷闲：还有空闲任务，休息一下</li><li>厨房着火了，什么都别说了，先灭火：优先级更高</li></ul></li><li>栈(Stack) <ul><li>喂小孩时，我要记得上一口喂了米饭，这口要喂青菜了</li><li>回信息时，我要记得刚才聊的是啥</li><li>做不同的任务，这些细节不一样</li><li>对于人来说，当然是记在脑子里</li><li>对于程序，是记在栈里</li><li>每个任务有自己的栈</li></ul></li><li>事件驱动 <ul><li>孩子吃饭太慢：先休息一会，等他咽下去了、等他提醒我了，再喂下一口</li></ul></li><li>协助式调度(Co-operative Scheduling) <ul><li>你在给同事回信息 <ul><li>同事说：好了，你先去给小孩喂一口饭吧，你才能离开</li><li>同事不放你走，即使孩子哭了你也不能走</li></ul></li><li>你好不容易可以给孩子喂饭了 <ul><li>孩子说：好了，妈妈你去处理一下工作吧，你才能离开</li><li>孩子不放你走，即使同事连发信息你也不能走</li></ul></li></ul></li></ul><p>这涉及很多概念，后续章节详细分析。</p><h2 id="_3-2-任务创建与删除" tabindex="-1"><a class="header-anchor" href="#_3-2-任务创建与删除" aria-hidden="true">#</a> 3.2 任务创建与删除</h2><h3 id="_3-2-1-什么是任务" tabindex="-1"><a class="header-anchor" href="#_3-2-1-什么是任务" aria-hidden="true">#</a> 3.2.1 什么是任务</h3><p>在FreeRTOS中，任务就是一个函数，原型如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">ATaskFunction</span><span class="token punctuation">(</span> <span class="token keyword">void</span> <span class="token operator">*</span>pvParameters <span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>要注意的是：</p><ul><li>这个函数不能返回</li><li>同一个函数，可以用来创建多个任务；换句话说，多个任务可以运行同一个函数</li><li>函数内部，尽量使用局部变量： <ul><li>每个任务都有自己的栈</li><li>每个任务运行这个函数时 <ul><li>任务A的局部变量放在任务A的栈里、任务B的局部变量放在任务B的栈里</li><li>不同任务的局部变量，有自己的副本</li></ul></li><li>函数使用全局变量、静态变量的话 <ul><li>只有一个副本：多个任务使用的是同一个副本</li><li>要防止冲突(后续会讲)</li></ul></li></ul></li></ul><p>下面是一个示例：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">ATaskFunction</span><span class="token punctuation">(</span> <span class="token keyword">void</span> <span class="token operator">*</span>pvParameters <span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token comment">/* 对于不同的任务，局部变量放在任务的栈里，有各自的副本 */</span>
	<span class="token class-name">int32_t</span> lVariableExample <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	
    <span class="token comment">/* 任务函数通常实现为一个无限循环 */</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token punctuation">;</span><span class="token punctuation">;</span> <span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		<span class="token comment">/* 任务的代码 */</span>
	<span class="token punctuation">}</span>

    <span class="token comment">/* 如果程序从循环中退出，一定要使用vTaskDelete删除自己
     * NULL表示删除的是自己
     */</span>
	<span class="token function">vTaskDelete</span><span class="token punctuation">(</span> <span class="token constant">NULL</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token comment">/* 程序不会执行到这里, 如果执行到这里就出错了 */</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-2-2-创建任务" tabindex="-1"><a class="header-anchor" href="#_3-2-2-创建任务" aria-hidden="true">#</a> 3.2.2 创建任务</h3><p>创建任务时使用的函数如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>BaseType_t <span class="token function">xTaskCreate</span><span class="token punctuation">(</span> TaskFunction_t pxTaskCode<span class="token punctuation">,</span> <span class="token comment">// 函数指针, 任务函数</span>
                        <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span> <span class="token keyword">const</span> pcName<span class="token punctuation">,</span> <span class="token comment">// 任务的名字</span>
                        <span class="token keyword">const</span> configSTACK_DEPTH_TYPE usStackDepth<span class="token punctuation">,</span> <span class="token comment">// 栈大小,单位为word,10表示40字节</span>
                        <span class="token keyword">void</span> <span class="token operator">*</span> <span class="token keyword">const</span> pvParameters<span class="token punctuation">,</span> <span class="token comment">// 调用任务函数时传入的参数</span>
                        UBaseType_t uxPriority<span class="token punctuation">,</span>    <span class="token comment">// 优先级</span>
                        TaskHandle_t <span class="token operator">*</span> <span class="token keyword">const</span> pxCreatedTask <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 任务句柄, 以后使用它来操作这个任务</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>参数说明：</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>pvTaskCode</td><td>函数指针，可以简单地认为任务就是一个C函数。<br>它稍微特殊一点：永远不退出，或者退出时要调用&quot;vTaskDelete(NULL)&quot;</td></tr><tr><td>pcName</td><td>任务的名字，FreeRTOS内部不使用它，仅仅起调试作用。<br>长度为：configMAX_TASK_NAME_LEN</td></tr><tr><td>usStackDepth</td><td>每个任务都有自己的栈，这里指定栈大小。<br>单位是word，比如传入100，表示栈大小为100 word，也就是400字节。<br>最大值为uint16_t的最大值。<br>怎么确定栈的大小，并不容易，很多时候是估计。<br>精确的办法是看反汇编码。</td></tr><tr><td>pvParameters</td><td>调用pvTaskCode函数指针时用到：pvTaskCode(pvParameters)</td></tr><tr><td>uxPriority</td><td>优先级范围：0~(configMAX_PRIORITIES – 1)<br>数值越小优先级越低，<br>如果传入过大的值，xTaskCreate会把它调整为(configMAX_PRIORITIES – 1)</td></tr><tr><td>pxCreatedTask</td><td>用来保存xTaskCreate的输出结果：task handle。<br>以后如果想操作这个任务，比如修改它的优先级，就需要这个handle。<br>如果不想使用该handle，可以传入NULL。</td></tr><tr><td>返回值</td><td>成功：pdPASS；<br>失败：errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY(失败原因只有内存不足)<br>注意：文档里都说失败时返回值是pdFAIL，这不对。<br>pdFAIL是0，errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY是-1。</td></tr></tbody></table><h3 id="_3-2-3-示例1-创建任务" tabindex="-1"><a class="header-anchor" href="#_3-2-3-示例1-创建任务" aria-hidden="true">#</a> 3.2.3 示例1: 创建任务</h3><p>代码为：<code>FreeRTOS_01_create_task</code></p><p>使用2个函数分别创建2个任务。</p><p>任务1的代码：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">vTask1</span><span class="token punctuation">(</span> <span class="token keyword">void</span> <span class="token operator">*</span>pvParameters <span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>pcTaskName <span class="token operator">=</span> <span class="token string">&quot;T1 run\\r\\n&quot;</span><span class="token punctuation">;</span>
	<span class="token keyword">volatile</span> <span class="token class-name">uint32_t</span> ul<span class="token punctuation">;</span> <span class="token comment">/* volatile用来避免被优化掉 */</span>
	
	<span class="token comment">/* 任务函数的主体一般都是无限循环 */</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token punctuation">;</span><span class="token punctuation">;</span> <span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		<span class="token comment">/* 打印任务1的信息 */</span>
		<span class="token function">printf</span><span class="token punctuation">(</span> pcTaskName <span class="token punctuation">)</span><span class="token punctuation">;</span>
		
		<span class="token comment">/* 延迟一会(比较简单粗暴) */</span>
		<span class="token keyword">for</span><span class="token punctuation">(</span> ul <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> ul <span class="token operator">&lt;</span> mainDELAY_LOOP_COUNT<span class="token punctuation">;</span> ul<span class="token operator">++</span> <span class="token punctuation">)</span>
		<span class="token punctuation">{</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>任务2的代码：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">vTask2</span><span class="token punctuation">(</span> <span class="token keyword">void</span> <span class="token operator">*</span>pvParameters <span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>pcTaskName <span class="token operator">=</span> <span class="token string">&quot;T2 run\\r\\n&quot;</span><span class="token punctuation">;</span>
	<span class="token keyword">volatile</span> <span class="token class-name">uint32_t</span> ul<span class="token punctuation">;</span> <span class="token comment">/* volatile用来避免被优化掉 */</span>
	
	<span class="token comment">/* 任务函数的主体一般都是无限循环 */</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token punctuation">;</span><span class="token punctuation">;</span> <span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		<span class="token comment">/* 打印任务1的信息 */</span>
		<span class="token function">printf</span><span class="token punctuation">(</span> pcTaskName <span class="token punctuation">)</span><span class="token punctuation">;</span>
		
		<span class="token comment">/* 延迟一会(比较简单粗暴) */</span>
		<span class="token keyword">for</span><span class="token punctuation">(</span> ul <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> ul <span class="token operator">&lt;</span> mainDELAY_LOOP_COUNT<span class="token punctuation">;</span> ul<span class="token operator">++</span> <span class="token punctuation">)</span>
		<span class="token punctuation">{</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>main函数：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span> <span class="token keyword">void</span> <span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token function">prvSetupHardware</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	
	<span class="token function">xTaskCreate</span><span class="token punctuation">(</span>vTask1<span class="token punctuation">,</span> <span class="token string">&quot;Task 1&quot;</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">xTaskCreate</span><span class="token punctuation">(</span>vTask2<span class="token punctuation">,</span> <span class="token string">&quot;Task 2&quot;</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token comment">/* 启动调度器 */</span>
	<span class="token function">vTaskStartScheduler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token comment">/* 如果程序运行到了这里就表示出错了, 一般是内存不足 */</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行结果如下：</p><p><img src="http://photos.100ask.net/rtos-docs/FreeRTOS/simulator/chapter-3/04_create_two_task.png" alt="image-20210729170906116"></p><p>注意：</p><ul><li>task 2先运行！</li><li>要分析xTaskCreate的代码才能知道原因：更高优先级的、或者后面创建的任务先运行。</li></ul><p>任务运行图：</p><ul><li>在t1：Task2进入运行态，一直运行直到t2</li><li>在t2：Task1进入运行态，一直运行直到t3；在t3，Task2重新进入运行态</li></ul><p><img src="http://photos.100ask.net/rtos-docs/FreeRTOS/simulator/chapter-3/05_task_schedul.png" alt="image-20210729172213224"></p><h3 id="_3-2-4-示例2-使用任务参数" tabindex="-1"><a class="header-anchor" href="#_3-2-4-示例2-使用任务参数" aria-hidden="true">#</a> 3.2.4 示例2: 使用任务参数</h3><p>代码为：<code>FreeRTOS_02_create_task_use_params</code></p><p>我们说过，多个任务可以使用同一个函数，怎么体现它们的差别？</p><ul><li>栈不同</li><li>创建任务时可以传入不同的参数</li></ul><p>我们创建2个任务，使用同一个函数，代码如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">vTaskFunction</span><span class="token punctuation">(</span> <span class="token keyword">void</span> <span class="token operator">*</span>pvParameters <span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>pcTaskText <span class="token operator">=</span> pvParameters<span class="token punctuation">;</span>
	<span class="token keyword">volatile</span> <span class="token class-name">uint32_t</span> ul<span class="token punctuation">;</span> <span class="token comment">/* volatile用来避免被优化掉 */</span>
	
	<span class="token comment">/* 任务函数的主体一般都是无限循环 */</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token punctuation">;</span><span class="token punctuation">;</span> <span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		<span class="token comment">/* 打印任务的信息 */</span>
		<span class="token function">printf</span><span class="token punctuation">(</span>pcTaskText<span class="token punctuation">)</span><span class="token punctuation">;</span>
		
		<span class="token comment">/* 延迟一会(比较简单粗暴) */</span>
		<span class="token keyword">for</span><span class="token punctuation">(</span> ul <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> ul <span class="token operator">&lt;</span> mainDELAY_LOOP_COUNT<span class="token punctuation">;</span> ul<span class="token operator">++</span> <span class="token punctuation">)</span>
		<span class="token punctuation">{</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述代码中的<code>pcTaskText</code>来自参数<code>pvParameters</code>，<code>pvParameters</code>来自哪里？创建任务时传入的。</p><p>代码如下：</p><ul><li>使用xTaskCreate创建2个任务时，第4个参数就是pvParameters</li><li>不同的任务，pvParameters不一样</li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>pcTextForTask1 <span class="token operator">=</span> <span class="token string">&quot;T1 run\\r\\n&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">static</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>pcTextForTask2 <span class="token operator">=</span> <span class="token string">&quot;T2 run\\r\\n&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span> <span class="token keyword">void</span> <span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token function">prvSetupHardware</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	
	<span class="token function">xTaskCreate</span><span class="token punctuation">(</span>vTaskFunction<span class="token punctuation">,</span> <span class="token string">&quot;Task 1&quot;</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span>pcTextForTask1<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">xTaskCreate</span><span class="token punctuation">(</span>vTaskFunction<span class="token punctuation">,</span> <span class="token string">&quot;Task 2&quot;</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span>pcTextForTask2<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token comment">/* 启动调度器 */</span>
	<span class="token function">vTaskStartScheduler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token comment">/* 如果程序运行到了这里就表示出错了, 一般是内存不足 */</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-2-5-任务的删除" tabindex="-1"><a class="header-anchor" href="#_3-2-5-任务的删除" aria-hidden="true">#</a> 3.2.5 任务的删除</h3><p>删除任务时使用的函数如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">vTaskDelete</span><span class="token punctuation">(</span> TaskHandle_t xTaskToDelete <span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数说明：</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>pvTaskCode</td><td>任务句柄，使用xTaskCreate创建任务时可以得到一个句柄。<br>也可传入NULL，这表示删除自己。</td></tr></tbody></table><p>怎么删除任务？举个不好的例子：</p><ul><li>自杀：<code>vTaskDelete(NULL)</code></li><li>被杀：别的任务执行<code>vTaskDelete(pvTaskCode)</code>，pvTaskCode是自己的句柄</li><li>杀人：执行<code>vTaskDelete(pvTaskCode)</code>，pvTaskCode是别的任务的句柄</li></ul><h3 id="_3-2-6-示例3-删除任务" tabindex="-1"><a class="header-anchor" href="#_3-2-6-示例3-删除任务" aria-hidden="true">#</a> 3.2.6 示例3: 删除任务</h3><p>代码为：<code>FreeRTOS_03_delete_task</code></p><p>本节代码会涉及优先级的知识，可以只看vTaskDelete的用法，忽略优先级的讲解。</p><p>我们要做这些事情：</p><ul><li>创建任务1：任务1的大循环里，创建任务2，然后休眠一段时间</li><li>任务2：打印一句话，然后就删除自己</li></ul><p>任务1的代码如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">vTask1</span><span class="token punctuation">(</span> <span class="token keyword">void</span> <span class="token operator">*</span>pvParameters <span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token keyword">const</span> TickType_t xDelay100ms <span class="token operator">=</span> <span class="token function">pdMS_TO_TICKS</span><span class="token punctuation">(</span> <span class="token number">100UL</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>		
	BaseType_t ret<span class="token punctuation">;</span>
	
	<span class="token comment">/* 任务函数的主体一般都是无限循环 */</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token punctuation">;</span><span class="token punctuation">;</span> <span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		<span class="token comment">/* 打印任务的信息 */</span>
		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Task1 is running\\r\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		
		ret <span class="token operator">=</span> <span class="token function">xTaskCreate</span><span class="token punctuation">(</span> vTask2<span class="token punctuation">,</span> <span class="token string">&quot;Task 2&quot;</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>xTask2Handle <span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">!=</span> pdPASS<span class="token punctuation">)</span>
			<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Create Task2 Failed\\r\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		
		<span class="token comment">// 如果不休眠的话, Idle任务无法得到执行</span>
		<span class="token comment">// Idel任务会清理任务2使用的内存</span>
		<span class="token comment">// 如果不休眠则Idle任务无法执行, 最后内存耗尽</span>
		<span class="token function">vTaskDelay</span><span class="token punctuation">(</span> xDelay100ms <span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>任务2的代码如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">vTask2</span><span class="token punctuation">(</span> <span class="token keyword">void</span> <span class="token operator">*</span>pvParameters <span class="token punctuation">)</span>
<span class="token punctuation">{</span>	
	<span class="token comment">/* 打印任务的信息 */</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Task2 is running and about to delete itself\\r\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token comment">// 可以直接传入参数NULL, 这里只是为了演示函数用法</span>
	<span class="token function">vTaskDelete</span><span class="token punctuation">(</span>xTask2Handle<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>main函数代码如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span> <span class="token keyword">void</span> <span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token function">prvSetupHardware</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	
	<span class="token function">xTaskCreate</span><span class="token punctuation">(</span>vTask1<span class="token punctuation">,</span> <span class="token string">&quot;Task 1&quot;</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token comment">/* 启动调度器 */</span>
	<span class="token function">vTaskStartScheduler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token comment">/* 如果程序运行到了这里就表示出错了, 一般是内存不足 */</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行结果如下：</p><p><img src="http://photos.100ask.net/rtos-docs/FreeRTOS/simulator/chapter-3/04_delete_task.png" alt="image-20210731110531625"></p><p>任务运行图：</p><ul><li>main函数中创建任务1，优先级为1。任务1运行时，它创建任务2，任务2的优先级是2。</li><li>任务2的优先级最高，它马上执行。</li><li>任务2打印一句话后，就删除了自己。</li><li>任务2被删除后，任务1的优先级最高，轮到任务1继续运行，它调用<code>vTaskDelay() </code>进入Block状态</li><li>任务1 Block期间，轮到Idle任务执行：它释放任务2的内存(TCB、栈)</li><li>时间到后，任务1变为最高优先级的任务继续执行。</li><li>如此循环。</li></ul><p><img src="http://photos.100ask.net/rtos-docs/FreeRTOS/simulator/chapter-3/06_task_schedul_for_delete.png" alt="image-20210731111929008"></p><p>在任务1的函数中，如果不调用vTaskDelay，则Idle任务用于没有机会执行，它就无法释放创建任务2是分配的内存。</p><p>而任务1在不断地创建任务，不断地消耗内存，最终内存耗尽再也无法创建新的任务。</p><p>现象如下：</p><p><img src="http://photos.100ask.net/rtos-docs/FreeRTOS/simulator/chapter-3/07_create_task_fail.png" alt="image-20210731112826679"></p><p>任务1的代码中，需要注意的是：xTaskCreate的返回值。</p><ul><li>很多手册里说它失败时返回值是pdFAIL，这个宏是0</li><li>其实失败时返回值是errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY，这个宏是-1</li><li>为了避免混淆，我们使用返回值跟pdPASS来比较，这个宏是1</li></ul><h2 id="_3-3-任务优先级和tick" tabindex="-1"><a class="header-anchor" href="#_3-3-任务优先级和tick" aria-hidden="true">#</a> 3.3 任务优先级和Tick</h2><h3 id="_3-3-1-任务优先级" tabindex="-1"><a class="header-anchor" href="#_3-3-1-任务优先级" aria-hidden="true">#</a> 3.3.1 任务优先级</h3><p>在上个示例中我们体验过优先级的使用：高优先级的任务先运行。</p><p>优先级的取值范围是：0~(configMAX_PRIORITIES – 1)，数值越大优先级越高。</p><p>FreeRTOS的调度器可以使用2种方法来快速找出优先级最高的、可以运行的任务。使用不同的方法时，configMAX_PRIORITIES 的取值有所不同。</p><ul><li>通用方法 使用C函数实现，对所有的架构都是同样的代码。对configMAX_PRIORITIES的取值没有限制。但是configMAX_PRIORITIES的取值还是尽量小，因为取值越大越浪费内存，也浪费时间。 configUSE_PORT_OPTIMISED_TASK_SELECTION被定义为0、或者未定义时，使用此方法。</li><li>架构相关的优化的方法 架构相关的汇编指令，可以从一个32位的数里快速地找出为1的最高位。使用这些指令，可以快速找出优先级最高的、可以运行的任务。 使用这种方法时，configMAX_PRIORITIES的取值不能超过32。 configUSE_PORT_OPTIMISED_TASK_SELECTION被定义为1时，使用此方法。</li></ul><p>在学习调度方法之前，你只要初略地知道：</p><ul><li>FreeRTOS会确保最高优先级的、可运行的任务，马上就能执行</li><li>对于相同优先级的、可运行的任务，轮流执行</li></ul><p>这无需记忆，就像我们举的例子：</p><ul><li>厨房着火了，当然优先灭火</li><li>喂饭、回复信息同样重要，轮流做</li></ul><h3 id="_3-3-2-tick" tabindex="-1"><a class="header-anchor" href="#_3-3-2-tick" aria-hidden="true">#</a> 3.3.2 Tick</h3><p>对于同优先级的任务，它们“轮流”执行。怎么轮流？你执行一会，我执行一会。</p><p>&quot;一会&quot;怎么定义？</p><p>人有心跳，心跳间隔基本恒定。</p><p>FreeRTOS中也有心跳，它使用定时器产生固定间隔的中断。这叫Tick、滴答，比如每10ms发生一次时钟中断。</p><p>如下图：</p><ul><li>假设t1、t2、t3发生时钟中断</li><li>两次中断之间的时间被称为时间片(time slice、tick period)</li><li>时间片的长度由configTICK_RATE_HZ 决定，假设configTICK_RATE_HZ为100，那么时间片长度就是10ms</li></ul><p><img src="http://photos.100ask.net/rtos-docs/FreeRTOS/simulator/chapter-3/08_time_tick.png" alt="image-20210731130348561"></p><p>相同优先级的任务怎么切换呢？请看下图：</p><ul><li>任务2从t1执行到t2</li><li>在t2发生tick中断，进入tick中断处理函数： <ul><li>选择下一个要运行的任务</li><li>执行完中断处理函数后，切换到新的任务：任务1</li></ul></li><li>任务1从t2执行到t3</li><li>从下图中可以看出，任务运行的时间并不是严格从t1,t2,t3哪里开始</li></ul><p><img src="http://photos.100ask.net/rtos-docs/FreeRTOS/simulator/chapter-3/09_tick_interrtups.png" alt="image-20210731130720669"></p><p>有了Tick的概念后，我们就可以使用Tick来衡量时间了，比如：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token function">vTaskDelay</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 等待2个Tick，假设configTICK_RATE_HZ=100, Tick周期时10ms, 等待20ms</span>

<span class="token comment">// 还可以使用pdMS_TO_TICKS宏把ms转换为tick</span>
<span class="token function">vTaskDelay</span><span class="token punctuation">(</span><span class="token function">pdMS_TO_TICKS</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>	 <span class="token comment">// 等待100ms</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意，基于Tick实现的延时并不精确，比如<code>vTaskDelay(2)</code>的本意是延迟2个Tick周期，有可能经过1个Tick多一点就返回了。</p><p>如下图：</p><p><img src="http://photos.100ask.net/rtos-docs/FreeRTOS/simulator/chapter-3/10_taskdelay.png" alt="image-20210731133559155"></p><p>使用vTaskDelay函数时，建议以ms为单位，使用pdMS_TO_TICKS把时间转换为Tick。</p><p>这样的代码就与configTICK_RATE_HZ无关，即使配置项configTICK_RATE_HZ改变了，我们也不用去修改代码。</p><h3 id="_3-3-3-示例4-优先级实验" tabindex="-1"><a class="header-anchor" href="#_3-3-3-示例4-优先级实验" aria-hidden="true">#</a> 3.3.3 示例4: 优先级实验</h3><p>代码为：<code>FreeRTOS_04_task_priority</code></p><p>本程序会创建3个任务：</p><ul><li>任务1、任务2：优先级相同，都是1</li><li>任务3：优先级最高，是2</li></ul><p>任务1、2代码如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">vTask1</span><span class="token punctuation">(</span> <span class="token keyword">void</span> <span class="token operator">*</span>pvParameters <span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token comment">/* 任务函数的主体一般都是无限循环 */</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token punctuation">;</span><span class="token punctuation">;</span> <span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		<span class="token comment">/* 打印任务的信息 */</span>
		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;T1\\r\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>				
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">vTask2</span><span class="token punctuation">(</span> <span class="token keyword">void</span> <span class="token operator">*</span>pvParameters <span class="token punctuation">)</span>
<span class="token punctuation">{</span>	
	<span class="token comment">/* 任务函数的主体一般都是无限循环 */</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token punctuation">;</span><span class="token punctuation">;</span> <span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		<span class="token comment">/* 打印任务的信息 */</span>
		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;T2\\r\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>				
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>任务3代码如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">vTask3</span><span class="token punctuation">(</span> <span class="token keyword">void</span> <span class="token operator">*</span>pvParameters <span class="token punctuation">)</span>
<span class="token punctuation">{</span>	
	<span class="token keyword">const</span> TickType_t xDelay3000ms <span class="token operator">=</span> <span class="token function">pdMS_TO_TICKS</span><span class="token punctuation">(</span> <span class="token number">3000UL</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>		
	
	<span class="token comment">/* 任务函数的主体一般都是无限循环 */</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token punctuation">;</span><span class="token punctuation">;</span> <span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		<span class="token comment">/* 打印任务的信息 */</span>
		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;T3\\r\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>				

		<span class="token comment">// 如果不休眠的话, 其他任务无法得到执行</span>
		<span class="token function">vTaskDelay</span><span class="token punctuation">(</span> xDelay3000ms <span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>main函数代码如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token punctuation">{</span>
	<span class="token function">prvSetupHardware</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	
	<span class="token function">xTaskCreate</span><span class="token punctuation">(</span>vTask1<span class="token punctuation">,</span> <span class="token string">&quot;Task 1&quot;</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">xTaskCreate</span><span class="token punctuation">(</span>vTask2<span class="token punctuation">,</span> <span class="token string">&quot;Task 2&quot;</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">xTaskCreate</span><span class="token punctuation">(</span>vTask3<span class="token punctuation">,</span> <span class="token string">&quot;Task 3&quot;</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token comment">/* 启动调度器 */</span>
	<span class="token function">vTaskStartScheduler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token comment">/* 如果程序运行到了这里就表示出错了, 一般是内存不足 */</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行情况如下图所示：</p><ul><li>任务3优先执行，直到它调用vTaskDelay主动放弃运行</li><li>任务1、任务2：轮流执行</li></ul><p><img src="http://photos.100ask.net/rtos-docs/FreeRTOS/simulator/chapter-3/11_priority_result.png" alt="image-20210731140405148"></p><p>调度情况如下图所示：</p><p><img src="http://photos.100ask.net/rtos-docs/FreeRTOS/simulator/chapter-3/12_priority_scheduler.png" alt="image-20210731143751639"></p><h3 id="_3-3-4-示例5-修改优先级" tabindex="-1"><a class="header-anchor" href="#_3-3-4-示例5-修改优先级" aria-hidden="true">#</a> 3.3.4 示例5: 修改优先级</h3><p>本节代码为：<code>FreeRTOS_05_change_priority</code>。</p><p>使用uxTaskPriorityGet来获得任务的优先级：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>UBaseType_t <span class="token function">uxTaskPriorityGet</span><span class="token punctuation">(</span> <span class="token keyword">const</span> TaskHandle_t xTask <span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>使用参数xTask来指定任务，设置为NULL表示获取自己的优先级。</p><p>使用vTaskPrioritySet 来设置任务的优先级：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">vTaskPrioritySet</span><span class="token punctuation">(</span> TaskHandle_t xTask<span class="token punctuation">,</span>
                       UBaseType_t uxNewPriority <span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>使用参数xTask来指定任务，设置为NULL表示设置自己的优先级； 参数uxNewPriority表示新的优先级，取值范围是0~(configMAX_PRIORITIES – 1)。</p><p>main函数的代码如下，它创建了2个任务：任务1的优先级更高，它先执行：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span> <span class="token keyword">void</span> <span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token function">prvSetupHardware</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	
	<span class="token comment">/* Task1的优先级更高, Task1先执行 */</span>
	<span class="token function">xTaskCreate</span><span class="token punctuation">(</span> vTask1<span class="token punctuation">,</span> <span class="token string">&quot;Task 1&quot;</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token constant">NULL</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">xTaskCreate</span><span class="token punctuation">(</span> vTask2<span class="token punctuation">,</span> <span class="token string">&quot;Task 2&quot;</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>xTask2Handle <span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token comment">/* 启动调度器 */</span>
	<span class="token function">vTaskStartScheduler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token comment">/* 如果程序运行到了这里就表示出错了, 一般是内存不足 */</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>任务1的代码如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">vTask1</span><span class="token punctuation">(</span> <span class="token keyword">void</span> <span class="token operator">*</span>pvParameters <span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	UBaseType_t uxPriority<span class="token punctuation">;</span>
	
	<span class="token comment">/* Task1,Task2都不会进入阻塞或者暂停状态
	 * 根据优先级决定谁能运行
	 */</span>
	
	<span class="token comment">/* 得到Task1自己的优先级 */</span>
	uxPriority <span class="token operator">=</span> <span class="token function">uxTaskPriorityGet</span><span class="token punctuation">(</span> <span class="token constant">NULL</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
	
	<span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token punctuation">;</span><span class="token punctuation">;</span> <span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		<span class="token function">printf</span><span class="token punctuation">(</span> <span class="token string">&quot;Task 1 is running\\r\\n&quot;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>

		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;About to raise the Task 2 priority\\r\\n&quot;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
		
		<span class="token comment">/* 提升Task2的优先级高于Task1
		 * Task2会即刻执行
 		 */</span>
		<span class="token function">vTaskPrioritySet</span><span class="token punctuation">(</span> xTask2Handle<span class="token punctuation">,</span> <span class="token punctuation">(</span> uxPriority <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
		
		<span class="token comment">/* 如果Task1能运行到这里，表示它的优先级比Task2高
		* 那就表示Task2肯定把自己的优先级降低了
 		 */</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>任务2的代码如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">vTask2</span><span class="token punctuation">(</span> <span class="token keyword">void</span> <span class="token operator">*</span>pvParameters <span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	UBaseType_t uxPriority<span class="token punctuation">;</span>

	<span class="token comment">/* Task1,Task2都不会进入阻塞或者暂停状态
	 * 根据优先级决定谁能运行
	 */</span>
	
	<span class="token comment">/* 得到Task2自己的优先级 */</span>
	uxPriority <span class="token operator">=</span> <span class="token function">uxTaskPriorityGet</span><span class="token punctuation">(</span> <span class="token constant">NULL</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
	
	<span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token punctuation">;</span><span class="token punctuation">;</span> <span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		<span class="token comment">/* 能运行到这里表示Task2的优先级高于Task1
		 * Task1提高了Task2的优先级
		 */</span>
		<span class="token function">printf</span><span class="token punctuation">(</span> <span class="token string">&quot;Task 2 is running\\r\\n&quot;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
		
		<span class="token function">printf</span><span class="token punctuation">(</span> <span class="token string">&quot;About to lower the Task 2 priority\\r\\n&quot;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>

		<span class="token comment">/* 降低Task2自己的优先级，让它小于Task1
		 * Task1得以运行
 		 */</span>
		<span class="token function">vTaskPrioritySet</span><span class="token punctuation">(</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token punctuation">(</span> uxPriority <span class="token operator">-</span> <span class="token number">2</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>调度情况如下图所示：</p><ul><li>1：一开始Task1优先级最高，它先执行。它提升了Task2的优先级。</li><li>2：Task2的优先级最高，它执行。它把自己的优先级降低了。</li><li>3：Task1的优先级最高，再次执行。它提升了Task2的优先级。</li><li>如此循环。</li><li>注意：Task1的优先级一直是2，Task2的优先级是3或1，都大于0。所以Idel任务没有机会执行。</li></ul><p><img src="http://photos.100ask.net/rtos-docs/FreeRTOS/simulator/chapter-3/15_change_priority.png" alt="image-20210731220350206"></p><h2 id="_3-4-任务状态" tabindex="-1"><a class="header-anchor" href="#_3-4-任务状态" aria-hidden="true">#</a> 3.4 任务状态</h2><p>以前我们很简单地把任务的状态分为2中：运行(Runing)、非运行(Not Running)。</p><p>对于非运行的状态，还可以继续细分，比如前面的<code>FreeRTOS_04_task_priority</code>中：</p><ul><li>Task3执行vTaskDelay后：处于非运行状态，要过3秒种才能再次运行</li><li>Task3运行期间，Task1、Task2也处于非运行状态，但是它们<strong>随时可以运行</strong></li><li>这两种&quot;非运行&quot;状态就不一样，可以细分为： <ul><li>阻塞状态(Blocked)</li><li>暂停状态(Suspended)</li><li>就绪状态(Ready)</li></ul></li></ul><h3 id="_3-4-1-阻塞状态-blocked" tabindex="-1"><a class="header-anchor" href="#_3-4-1-阻塞状态-blocked" aria-hidden="true">#</a> 3.4.1 阻塞状态(Blocked)</h3><p>在日常生活的例子中，母亲在电脑前跟同事沟通时，如果同事一直没回复，那么母亲的工作就被卡住了、被堵住了、处于阻塞状态(Blocked)。重点在于：母亲在<strong>等待</strong>。</p><p>在<code>FreeRTOS_04_task_priority</code>实验中，如果把任务3中的vTaskDelay调用注释掉，那么任务1、任务2根本没有执行的机会，任务1、任务2被&quot;饿死&quot;了(starve)。</p><p>在实际产品中，我们不会让一个任务一直运行，而是使用&quot;事件驱动&quot;的方法让它运行：</p><ul><li>任务要等待某个事件，事件发生后它才能运行</li><li>在等待事件过程中，它不消耗CPU资源</li><li>在等待事件的过程中，这个任务就处于阻塞状态(Blocked)</li></ul><p>在阻塞状态的任务，它可以等待两种类型的事件：</p><ul><li>时间相关的事件 <ul><li>可以等待一段时间：我等2分钟</li><li>也可以一直等待，直到某个绝对时间：我等到下午3点</li></ul></li><li>同步事件：这事件由别的任务，或者是中断程序产生 <ul><li>例子1：任务A等待任务B给它发送数据</li><li>例子2：任务A等待用户按下按键</li><li>同步事件的来源有很多(这些概念在后面会细讲)： <ul><li>队列(queue)</li><li>二进制信号量(binary semaphores)</li><li>计数信号量(counting semaphores)</li><li>互斥量(mutexes)</li><li>递归互斥量、递归锁(recursive mutexes)</li><li>事件组(event groups)</li><li>任务通知(task notifications)</li></ul></li></ul></li></ul><p>在等待一个同步事件时，可以加上超时时间。比如等待队里数据，超时时间设为10ms：</p><ul><li>10ms之内有数据到来：成功返回</li><li>10ms到了，还是没有数据：超时返回</li></ul><h3 id="_3-4-2-暂停状态-suspended" tabindex="-1"><a class="header-anchor" href="#_3-4-2-暂停状态-suspended" aria-hidden="true">#</a> 3.4.2 暂停状态(Suspended)</h3><p>在日常生活的例子中，母亲正在电脑前跟同事沟通，母亲可以暂停：</p><ul><li>好烦啊，我暂停一会</li><li>领导说：你暂停一下</li></ul><p>FreeRTOS中的任务也可以进入暂停状态，唯一的方法是通过vTaskSuspend函数。函数原型如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">vTaskSuspend</span><span class="token punctuation">(</span> TaskHandle_t xTaskToSuspend <span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参数xTaskToSuspend表示要暂停的任务，如果为NULL，表示暂停自己。</p><p>要退出暂停状态，只能由<strong>别人</strong>来操作：</p><ul><li>别的任务调用：vTaskResume</li><li>中断程序调用：xTaskResumeFromISR</li></ul><p>实际开发中，暂停状态用得不多。</p><h3 id="_3-4-3-就绪状态-ready" tabindex="-1"><a class="header-anchor" href="#_3-4-3-就绪状态-ready" aria-hidden="true">#</a> 3.4.3 就绪状态(Ready)</h3><p>这个任务完全准备好了，随时可以运行：只是还轮不到它。这时，它就处于就绪态(Ready)。</p><h3 id="_3-4-4-完整的状态转换图" tabindex="-1"><a class="header-anchor" href="#_3-4-4-完整的状态转换图" aria-hidden="true">#</a> 3.4.4 完整的状态转换图</h3><p><img src="http://photos.100ask.net/rtos-docs/FreeRTOS/simulator/chapter-3/13_full_task_state_machine.png" alt="image-20210731155223985"></p><h2 id="_3-5-delay函数" tabindex="-1"><a class="header-anchor" href="#_3-5-delay函数" aria-hidden="true">#</a> 3.5 Delay函数</h2><h3 id="_3-5-1-两个delay函数" tabindex="-1"><a class="header-anchor" href="#_3-5-1-两个delay函数" aria-hidden="true">#</a> 3.5.1 两个Delay函数</h3><p>有两个Delay函数：</p><ul><li>vTaskDelay：至少等待指定个数的Tick Interrupt才能变为就绪状态</li><li>vTaskDelayUntil：等待到指定的绝对时刻，才能变为就绪态。</li></ul><p>这2个函数原型如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">vTaskDelay</span><span class="token punctuation">(</span> <span class="token keyword">const</span> TickType_t xTicksToDelay <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">/* xTicksToDelay: 等待多少给Tick */</span>

<span class="token comment">/* pxPreviousWakeTime: 上一次被唤醒的时间
 * xTimeIncrement: 要阻塞到(pxPreviousWakeTime + xTimeIncrement)
 * 单位都是Tick Count
 */</span>
BaseType_t <span class="token function">xTaskDelayUntil</span><span class="token punctuation">(</span> TickType_t <span class="token operator">*</span> <span class="token keyword">const</span> pxPreviousWakeTime<span class="token punctuation">,</span>
                            <span class="token keyword">const</span> TickType_t xTimeIncrement <span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下面画图说明：</p><ul><li>使用vTaskDelay(n)时，进入、退出vTaskDelay的时间间隔至少是n个Tick中断</li><li>使用xTaskDelayUntil(&amp;Pre, n)时，前后两次退出xTaskDelayUntil的时间至少是n个Tick中断 <ul><li>退出xTaskDelayUntil时任务就进入的就绪状态，一般都能得到执行机会</li><li>所以可以使用xTaskDelayUntil来让任务周期性地运行</li></ul></li></ul><p><img src="http://photos.100ask.net/rtos-docs/FreeRTOS/simulator/chapter-3/14_delay_functions.png" alt="image-20210731205236939"></p><h3 id="_3-5-2-示例6-delay" tabindex="-1"><a class="header-anchor" href="#_3-5-2-示例6-delay" aria-hidden="true">#</a> 3.5.2 示例6: Delay</h3><p>本节代码为：<code>FreeRTOS_06_taskdelay</code>。</p><p>本程序会创建2个任务：</p><ul><li>Task1： <ul><li>高优先级</li><li>设置变量flag为1，然后调用<code>vTaskDelay(xDelay50ms);</code>或<code>vTaskDelayUntil(&amp;xLastWakeTime, xDelay50ms);</code></li></ul></li><li>Task2： <ul><li>低优先级</li><li>设置变量flag为0</li></ul></li></ul><p>main函数代码如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span> <span class="token keyword">void</span> <span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token function">prvSetupHardware</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	
	<span class="token comment">/* Task1的优先级更高, Task1先执行 */</span>
	<span class="token function">xTaskCreate</span><span class="token punctuation">(</span> vTask1<span class="token punctuation">,</span> <span class="token string">&quot;Task 1&quot;</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token constant">NULL</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">xTaskCreate</span><span class="token punctuation">(</span> vTask2<span class="token punctuation">,</span> <span class="token string">&quot;Task 2&quot;</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token constant">NULL</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token comment">/* 启动调度器 */</span>
	<span class="token function">vTaskStartScheduler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token comment">/* 如果程序运行到了这里就表示出错了, 一般是内存不足 */</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Task1的代码中使用条件开关来选择Delay函数，把<code>#if 1</code>改为<code>#if 0</code>就可以使用<code>vTaskDelayUntil</code>，代码如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">vTask1</span><span class="token punctuation">(</span> <span class="token keyword">void</span> <span class="token operator">*</span>pvParameters <span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token keyword">const</span> TickType_t xDelay50ms <span class="token operator">=</span> <span class="token function">pdMS_TO_TICKS</span><span class="token punctuation">(</span> <span class="token number">50UL</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
	TickType_t xLastWakeTime<span class="token punctuation">;</span>
	<span class="token keyword">int</span> i<span class="token punctuation">;</span>
	
	<span class="token comment">/* 获得当前的Tick Count */</span>
	xLastWakeTime <span class="token operator">=</span> <span class="token function">xTaskGetTickCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			
	<span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token punctuation">;</span><span class="token punctuation">;</span> <span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		flag <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
		
		<span class="token comment">/* 故意加入多个循环，让程序运行时间长一点 */</span>
		<span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span><span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
			<span class="token function">printf</span><span class="token punctuation">(</span> <span class="token string">&quot;Task 1 is running\\r\\n&quot;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token number">1</span>		</span></span>
		<span class="token function">vTaskDelay</span><span class="token punctuation">(</span>xDelay50ms<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">else</span>		</span>
		<span class="token function">vTaskDelayUntil</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>xLastWakeTime<span class="token punctuation">,</span> xDelay50ms<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span>		</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Task2的代码如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">vTask2</span><span class="token punctuation">(</span> <span class="token keyword">void</span> <span class="token operator">*</span>pvParameters <span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token punctuation">;</span><span class="token punctuation">;</span> <span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		flag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
		<span class="token function">printf</span><span class="token punctuation">(</span> <span class="token string">&quot;Task 2 is running\\r\\n&quot;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用Keil的逻辑分析观察flag变量的bit波形，如下：</p><ul><li>flag为1时表示Task1在运行，flag为0时表示Task2在运行，也就是Task1处于阻塞状态</li><li>vTaskDelay：指定的是阻塞的时间</li><li>vTaskDelayUntil：指定的是任务执行的间隔、周期</li></ul><p><img src="http://photos.100ask.net/rtos-docs/FreeRTOS/simulator/chapter-3/16_delay_time.png" alt="image-20210731233309265"></p><h2 id="_3-6-空闲任务及其钩子函数" tabindex="-1"><a class="header-anchor" href="#_3-6-空闲任务及其钩子函数" aria-hidden="true">#</a> 3.6 空闲任务及其钩子函数</h2><h3 id="_3-6-1-介绍" tabindex="-1"><a class="header-anchor" href="#_3-6-1-介绍" aria-hidden="true">#</a> 3.6.1 介绍</h3><p>在<code>FreeRTOS_03_delete_task</code>的实验里，我们体验过空闲任务(Idle任务)的作用：释放被删除的任务的内存。</p><p>除了上述目的之外，为什么必须要有空闲任务？一个良好的程序，它的任务都是事件驱动的：平时大部分时间处于阻塞状态。有可能我们自己创建的所有任务都无法执行，但是调度器必须能找到一个可以运行的任务：所以，我们要提供空闲任务。在使用<code>vTaskStartScheduler() </code>函数来创建、启动调度器时，这个函数内部会创建空闲任务：</p><ul><li>空闲任务优先级为0：它不能阻碍用户任务运行</li><li>空闲任务要么处于就绪态，要么处于运行态，永远不会阻塞</li></ul><p>空闲任务的优先级为0，这意味着一旦某个用户的任务变为就绪态，那么空闲任务马上被切换出去，让这个用户任务运行。在这种情况下，我们说用户任务&quot;抢占&quot;(pre-empt)了空闲任务，这是由调度器实现的。</p><p>要注意的是：如果使用<code>vTaskDelete() </code>来删除任务，那么你就要确保空闲任务有机会执行，否则就无法释放被删除任务的内存。</p><p>我们可以添加一个空闲任务的钩子函数(Idle Task Hook Functions)，空闲任务的循环每执行一次，就会调用一次钩子函数。钩子函数的作用有这些：</p><ul><li>执行一些低优先级的、后台的、需要连续执行的函数</li><li>测量系统的空闲时间：空闲任务能被执行就意味着所有的高优先级任务都停止了，所以测量空闲任务占据的时间，就可以算出处理器占用率。</li><li>让系统进入省电模式：空闲任务能被执行就意味着没有重要的事情要做，当然可以进入省电模式了。</li></ul><p>空闲任务的钩子函数的限制：</p><ul><li>不能导致空闲任务进入阻塞状态、暂停状态</li><li>如果你会使用<code>vTaskDelete() </code>来删除任务，那么钩子函数要非常高效地执行。如果空闲任务移植卡在钩子函数里的话，它就无法释放内存。</li></ul><h3 id="_3-6-2-使用钩子函数的前提" tabindex="-1"><a class="header-anchor" href="#_3-6-2-使用钩子函数的前提" aria-hidden="true">#</a> 3.6.2 使用钩子函数的前提</h3><p>在<code>FreeRTOS\\Source\\tasks.c</code>中，可以看到如下代码，所以前提就是：</p><ul><li>把这个宏定义为1：configUSE_IDLE_HOOK</li><li>实现<code>vApplicationIdleHook</code>函数</li></ul><p><img src="http://photos.100ask.net/rtos-docs/FreeRTOS/simulator/chapter-3/17_idle_hook.png" alt="image-20210801005130872"></p><h2 id="_3-7-调度算法" tabindex="-1"><a class="header-anchor" href="#_3-7-调度算法" aria-hidden="true">#</a> 3.7 调度算法</h2><h3 id="_3-7-1-重要概念" tabindex="-1"><a class="header-anchor" href="#_3-7-1-重要概念" aria-hidden="true">#</a> 3.7.1 重要概念</h3><p>这些知识在前面都提到过了，这里总结一下。</p><p>正在运行的任务，被称为&quot;正在使用处理器&quot;，它处于运行状态。在单处理系统中，任何时间里只能有一个任务处于运行状态。</p><p>非运行状态的任务，它处于这3中状态之一：阻塞(Blocked)、暂停(Suspended)、就绪(Ready)。就绪态的任务，可以被调度器挑选出来切换为运行状态，调度器永远都是挑选最高优先级的就绪态任务并让它进入运行状态。</p><p>阻塞状态的任务，它在等待&quot;事件&quot;，当事件发生时任务就会进入就绪状态。事件分为两类：时间相关的事件、同步事件。所谓时间相关的事件，就是设置超时时间：在指定时间内阻塞，时间到了就进入就绪状态。使用时间相关的事件，可以实现周期性的功能、可以实现超时功能。同步事件就是：某个任务在等待某些信息，别的任务或者中断服务程序会给它发送信息。怎么&quot;发送信息&quot;？方法很多，有：任务通知(task notification)、队列(queue)、事件组(event group)、信号量(semaphoe)、互斥量(mutex)等。这些方法用来发送同步信息，比如表示某个外设得到了数据。</p><h3 id="_3-7-2-配置调度算法" tabindex="-1"><a class="header-anchor" href="#_3-7-2-配置调度算法" aria-hidden="true">#</a> 3.7.2 配置调度算法</h3><p>所谓调度算法，就是怎么确定哪个就绪态的任务可以切换为运行状态。</p><p>通过配置文件FreeRTOSConfig.h的两个配置项来配置调度算法：configUSE_PREEMPTION、configUSE_TIME_SLICING。</p><p>还有第三个配置项：configUSE_TICKLESS_IDLE，它是一个高级选项，用于关闭Tick中断来实现省电，后续单独讲解。现在我们假设configUSE_TICKLESS_IDLE被设为0，先不使用这个功能。</p><p>调度算法的行为主要体现在两方面：高优先级的任务先运行、同优先级的就绪态任务如何被选中。调度算法要确保同优先级的就绪态任务，能&quot;轮流&quot;运行，策略是&quot;轮转调度&quot;(Round Robin Scheduling)。轮转调度并不保证任务的运行时间是公平分配的，我们还可以细化时间的分配方法。</p><p>从3个角度统一理解多种调度算法：</p><ul><li><p>可否抢占？高优先级的任务能否优先执行(配置项: configUSE_PREEMPTION)</p><ul><li>可以：被称作&quot;可抢占调度&quot;(Pre-emptive)，高优先级的就绪任务马上执行，下面再细化。</li><li>不可以：不能抢就只能协商了，被称作&quot;合作调度模式&quot;(Co-operative Scheduling) <ul><li>当前任务执行时，更高优先级的任务就绪了也不能马上运行，只能等待当前任务主动让出CPU资源。</li><li>其他同优先级的任务也只能等待：更高优先级的任务都不能抢占，平级的更应该老实点</li></ul></li></ul></li><li><p>可抢占的前提下，同优先级的任务是否轮流执行(配置项：configUSE_TIME_SLICING)</p><ul><li>轮流执行：被称为&quot;时间片轮转&quot;(Time Slicing)，同优先级的任务轮流执行，你执行一个时间片、我再执行一个时间片</li><li>不轮流执行：英文为&quot;without Time Slicing&quot;，当前任务会一直执行，直到主动放弃、或者被高优先级任务抢占</li></ul></li><li><p>在&quot;可抢占&quot;+&quot;时间片轮转&quot;的前提下，进一步细化：空闲任务是否让步于用户任务(配置项：configIDLE_SHOULD_YIELD)</p><ul><li>空闲任务低人一等，每执行一次循环，就看看是否主动让位给用户任务</li><li>空闲任务跟用户任务一样，大家轮流执行，没有谁更特殊</li></ul></li></ul><p>列表如下：</p><table><thead><tr><th>配置项</th><th>A</th><th>B</th><th>C</th><th>D</th><th>E</th></tr></thead><tbody><tr><td>configUSE_PREEMPTION</td><td>1</td><td>1</td><td>1</td><td>1</td><td>0</td></tr><tr><td>configUSE_TIME_SLICING</td><td>1</td><td>1</td><td>0</td><td>0</td><td>x</td></tr><tr><td>configIDLE_SHOULD_YIELD</td><td>1</td><td>0</td><td>1</td><td>0</td><td>x</td></tr><tr><td>说明</td><td>常用</td><td>很少用</td><td>很少用</td><td>很少用</td><td>几乎不用</td></tr></tbody></table><p>注：</p><ul><li>A：可抢占+时间片轮转+空闲任务让步</li><li>B：可抢占+时间片轮转+空闲任务不让步</li><li>C：可抢占+非时间片轮转+空闲任务让步</li><li>D：可抢占+非时间片轮转+空闲任务不让步</li><li>E：合作调度</li></ul><h3 id="_3-7-3-示例7-调度" tabindex="-1"><a class="header-anchor" href="#_3-7-3-示例7-调度" aria-hidden="true">#</a> 3.7.3 示例7: 调度</h3><p>本节代码为：<code>FreeRTOS_07_scheduler</code>。后续的实验都是基于这个程序，通过修改配置项来观察效果。</p><p>代码里创建了3个任务：Task1、Task2的优先级都是0，跟空闲任务一样，Task3优先级最高为2。程序里定义了4个全局变量，当某个的任务执行时，对应的变量就被设为1，可以通过Keil的逻辑分析仪查看任务切换情况：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">volatile</span> <span class="token keyword">int</span> flagIdleTaskrun <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token comment">// 空闲任务运行时flagIdleTaskrun=1</span>
<span class="token keyword">static</span> <span class="token keyword">volatile</span> <span class="token keyword">int</span> flagTask1run <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>     <span class="token comment">// 任务1运行时flagTask1run=1</span>
<span class="token keyword">static</span> <span class="token keyword">volatile</span> <span class="token keyword">int</span> flagTask2run <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>     <span class="token comment">// 任务2运行时flagTask2run=1</span>
<span class="token keyword">static</span> <span class="token keyword">volatile</span> <span class="token keyword">int</span> flagTask3run <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>     <span class="token comment">// 任务3运行时flagTask3run=1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>main函数代码如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span> <span class="token keyword">void</span> <span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token function">prvSetupHardware</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	
	<span class="token function">xTaskCreate</span><span class="token punctuation">(</span>vTask1<span class="token punctuation">,</span> <span class="token string">&quot;Task 1&quot;</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">xTaskCreate</span><span class="token punctuation">(</span>vTask2<span class="token punctuation">,</span> <span class="token string">&quot;Task 2&quot;</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">xTaskCreate</span><span class="token punctuation">(</span>vTask3<span class="token punctuation">,</span> <span class="token string">&quot;Task 3&quot;</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token comment">/* 启动调度器 */</span>
	<span class="token function">vTaskStartScheduler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token comment">/* 如果程序运行到了这里就表示出错了, 一般是内存不足 */</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>任务1、任务2代码如下，它们是&quot;连续任务&quot;(continuous task)：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">vTask1</span><span class="token punctuation">(</span> <span class="token keyword">void</span> <span class="token operator">*</span>pvParameters <span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token comment">/* 任务函数的主体一般都是无限循环 */</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token punctuation">;</span><span class="token punctuation">;</span> <span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		flagIdleTaskrun <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
		flagTask1run <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
		flagTask2run <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
		flagTask3run <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
		
		<span class="token comment">/* 打印任务的信息 */</span>
		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;T1\\r\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>				
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">vTask2</span><span class="token punctuation">(</span> <span class="token keyword">void</span> <span class="token operator">*</span>pvParameters <span class="token punctuation">)</span>
<span class="token punctuation">{</span>	
	<span class="token comment">/* 任务函数的主体一般都是无限循环 */</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token punctuation">;</span><span class="token punctuation">;</span> <span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		flagIdleTaskrun <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
		flagTask1run <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
		flagTask2run <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
		flagTask3run <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
		
		<span class="token comment">/* 打印任务的信息 */</span>
		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;T2\\r\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>				
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>任务3代码如下，它会调用<code>vTaskDelay</code>，这样别的任务才可以运行：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">vTask3</span><span class="token punctuation">(</span> <span class="token keyword">void</span> <span class="token operator">*</span>pvParameters <span class="token punctuation">)</span>
<span class="token punctuation">{</span>	
	<span class="token keyword">const</span> TickType_t xDelay5ms <span class="token operator">=</span> <span class="token function">pdMS_TO_TICKS</span><span class="token punctuation">(</span> <span class="token number">5UL</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>		
	
	<span class="token comment">/* 任务函数的主体一般都是无限循环 */</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token punctuation">;</span><span class="token punctuation">;</span> <span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		flagIdleTaskrun <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
		flagTask1run <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
		flagTask2run <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
		flagTask3run <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
		
		<span class="token comment">/* 打印任务的信息 */</span>
		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;T3\\r\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>				

		<span class="token comment">// 如果不休眠的话, 其他任务无法得到执行</span>
		<span class="token function">vTaskDelay</span><span class="token punctuation">(</span> xDelay5ms <span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>提供了一个空闲任务的钩子函数：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">vApplicationIdleHook</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	flagIdleTaskrun <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
	flagTask1run <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	flagTask2run <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	flagTask3run <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>	
	
	<span class="token comment">/* 故意加入打印让flagIdleTaskrun变为1的时间维持长一点 */</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Id\\r\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>				
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-7-4-对比效果-抢占与否" tabindex="-1"><a class="header-anchor" href="#_3-7-4-对比效果-抢占与否" aria-hidden="true">#</a> 3.7.4 对比效果: 抢占与否</h3><p>在<code>FreeRTOSConfig.h</code>中，定义这样的宏，对比逻辑分析仪的效果：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">// 实验1：抢占</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">configUSE_PREEMPTION</span>		<span class="token expression"><span class="token number">1</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">configUSE_TIME_SLICING</span>      <span class="token expression"><span class="token number">1</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">configIDLE_SHOULD_YIELD</span>		<span class="token expression"><span class="token number">1</span></span></span>

<span class="token comment">// 实验2：不抢占</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">configUSE_PREEMPTION</span>		<span class="token expression"><span class="token number">0</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">configUSE_TIME_SLICING</span>      <span class="token expression"><span class="token number">1</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">configIDLE_SHOULD_YIELD</span>		<span class="token expression"><span class="token number">1</span></span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从下面的对比图可以知道：</p><ul><li>抢占时：高优先级任务就绪时，就可以马上执行</li><li>不抢占时：优先级失去意义了，既然不能抢占就只能协商了，图中任务1一直在运行(一点都没有协商精神)，其他任务都无法执行。即使任务3的<code>vTaskDelay</code>已经超时、即使它的优先级更高，都没办法执行。</li></ul><p><img src="http://photos.100ask.net/rtos-docs/FreeRTOS/simulator/chapter-3/18_pre-emptive_or_not.png" alt="image-20210802000142854"></p><h3 id="_3-7-5-对比效果-时间片轮转与否" tabindex="-1"><a class="header-anchor" href="#_3-7-5-对比效果-时间片轮转与否" aria-hidden="true">#</a> 3.7.5 对比效果: 时间片轮转与否</h3><p>在<code>FreeRTOSConfig.h</code>中，定义这样的宏，对比逻辑分析仪的效果：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">// 实验1：时间片轮转</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">configUSE_PREEMPTION</span>		<span class="token expression"><span class="token number">1</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">configUSE_TIME_SLICING</span>      <span class="token expression"><span class="token number">1</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">configIDLE_SHOULD_YIELD</span>		<span class="token expression"><span class="token number">1</span></span></span>

<span class="token comment">// 实验2：时间片不轮转</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">configUSE_PREEMPTION</span>		<span class="token expression"><span class="token number">1</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">configUSE_TIME_SLICING</span>      <span class="token expression"><span class="token number">0</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">configIDLE_SHOULD_YIELD</span>		<span class="token expression"><span class="token number">1</span></span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从下面的对比图可以知道：</p><ul><li>时间片轮转：在Tick中断中会引起任务切换</li><li>时间片不轮转：高优先级任务就绪时会引起任务切换，高优先级任务不再运行时也会引起任务切换。可以看到任务3就绪后可以马上执行，它运行完毕后导致任务切换。其他时间没有任务切换，可以看到任务1、任务2都运行了很长时间。</li></ul><p><img src="http://photos.100ask.net/rtos-docs/FreeRTOS/simulator/chapter-3/19_time_slicing_or_not.png" alt="image-20210802000056846"></p><h3 id="_3-7-6-对比效果-空闲任务让步" tabindex="-1"><a class="header-anchor" href="#_3-7-6-对比效果-空闲任务让步" aria-hidden="true">#</a> 3.7.6 对比效果: 空闲任务让步</h3><p>在<code>FreeRTOSConfig.h</code>中，定义这样的宏，对比逻辑分析仪的效果：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">// 实验1：空闲任务让步</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">configUSE_PREEMPTION</span>		<span class="token expression"><span class="token number">1</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">configUSE_TIME_SLICING</span>      <span class="token expression"><span class="token number">1</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">configIDLE_SHOULD_YIELD</span>		<span class="token expression"><span class="token number">1</span></span></span>

<span class="token comment">// 实验2：空闲任务不让步</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">configUSE_PREEMPTION</span>		<span class="token expression"><span class="token number">1</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">configUSE_TIME_SLICING</span>      <span class="token expression"><span class="token number">1</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">configIDLE_SHOULD_YIELD</span>		<span class="token expression"><span class="token number">0</span></span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从下面的对比图可以知道：</p><ul><li>让步时：在空闲任务的每个循环中，会主动让出处理器，从图中可以看到flagIdelTaskrun的波形很小</li><li>不让步时：空闲任务跟任务1、任务2同等待遇，它们的波形宽度是差不多的</li></ul><p><img src="http://photos.100ask.net/rtos-docs/FreeRTOS/simulator/chapter-3/20_yield_or_not.png" alt="image-20210802000255899"></p><h2 id="技术答疑交流" tabindex="-1"><a class="header-anchor" href="#技术答疑交流" aria-hidden="true">#</a> 技术答疑交流</h2>`,251),k={href:"https://forums.100ask.net",target:"_blank",rel:"noopener noreferrer"},v=s("hr",null,null,-1);function m(b,T){const e=a("ExternalLinkIcon"),p=a("center");return c(),o("div",null,[r,s("p",null,[n("在学习中遇到任何问题，请前往我们的技术交流社区留言： "),s("a",k,[n("https://forums.100ask.net"),t(e)])]),v,t(p,null,{default:l(()=>[n("本章完")]),_:1})])}const g=i(d,[["render",m],["__file","chapter3.html.vue"]]);export{g as default};
